// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
  output   = "../ERD.svg"
}

enum Status {
  Andamento
  Finalizada
  NFinalizada
}

enum FilialStatus {
  On
  Chuva
  Noite
}

enum RoleEnum {
  superGerente
  gerente
}

model authLinksManager {
  id        String   @id @default(cuid())
  code      String   @unique
  managerId String   @map("manager_id")
  createdAt DateTime @default(now()) @map("created_at")

  //relações
  manager Manager @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@map("auth_link_manager")
}

model Manager {
  id        String   @id @default(cuid())
  nome      String   @db.VarChar(250)
  email     String   @unique
  role      RoleEnum @default(gerente)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //relações
  authLinksManager authLinksManager[]
  Filial           Filial[]

  @@map("manager")
}

model Filial {
  id        String       @id @default(cuid())
  managerId String       @unique @map("manager_id")
  nome      String       @unique @db.VarChar(100)
  telefone  String       @unique @db.VarChar(9)
  endereco  String       @unique // enderço da filial da empresa
  status    FilialStatus @default(On) //status da filial
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  //relações
  clientes   Cliente[]
  motoristas Motorista[]
  Recolha    Recolha[]
  manager    Manager     @relation(fields: [managerId], references: [id], onDelete: SetNull)

  @@map("filias")
}

model Veiculo {
  id        String      @id @default(cuid())
  matricula String      @unique @db.VarChar(8)
  createdAt DateTime    @default(now()) @map("created_at")
  updatedAt DateTime    @updatedAt @map("updated_at")
  Motorista Motorista[]
}

model Motorista {
  id          String   @id @default(cuid())
  filialId    String   @map("filial_id")
  numeroBI    String   @unique @map("numero_bi") @db.VarChar(13)
  veiculoId   String   @unique @map("veicolo_id")
  nome        String   @db.VarChar(150)
  email       String?  @unique
  coordenadas Float[]  @db.DoublePrecision() //explo [ 33.8475, -170.5953 ]lat,lgn
  senha       String
  telefone    String   @unique @db.VarChar(9)
  nascimento  DateTime
  avatar      String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  //relações
  recolhas Recolha[]
  filial   Filial    @relation(fields: [filialId], references: [id], onDelete: Cascade)
  veicolo  Veiculo   @relation(fields: [veiculoId], references: [id], onDelete: Cascade)

  @@map("Motoristas")
}

model Cliente {
  id          String   @id @default(cuid())
  filialId    String   @map("filial_id")
  nome        String   @db.VarChar(250)
  email       String   @unique
  numeroBI    String   @unique @map("numero_bi") @db.VarChar(13)
  telefone    String   @unique @db.VarChar(9)
  avatar      String?
  endereco    String //endereco da casa do cliente
  coordenadas Float[]  @db.DoublePrecision() //explo [ 33.8475, -170.5953 ]lat,lgn
  nascimento  DateTime
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  //relações
  recolhas Recolha[]
  filial   Filial    @relation(fields: [filialId], references: [id], onDelete: SetNull)

  @@map("Clientes")
}

model Recolha {
  id          String   @id @default(uuid())
  clienteId   String   @map("cliente_id") // ñ esquecer de tirar o destino da recolha na lat e lgn do cliente
  motoristaId String   @map("motorista_id")
  filialId    String   @map("filial_id")
  status      Status   @default(Andamento)
  coordenadas Float[]  @db.DoublePrecision() //explo [ 33.8475, -170.5953 ]lat,lgn
  descricao   String?  @db.Text
  distance    Float
  duration    Float
  directions  Json
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  //relações
  cliente   Cliente   @relation(fields: [clienteId], references: [id], onDelete: SetNull)
  motorista Motorista @relation(fields: [motoristaId], references: [id], onDelete: SetNull)
  filial    Filial    @relation(fields: [filialId], references: [id], onDelete: SetNull)

  @@map("Recolhas")
}
