// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["postgresqlExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // extensions = [postgis]
}

generator erd {
  provider = "prisma-erd-generator"
  theme    = "forest"
  output   = "../ERD.svg"
}

enum Status {
  pendente // pendente=> recolha atribuida para um mado motorista
  andamento //andamento => recolha a ser realizada no exacto momento pelo motorista
  cancelada //cancelada => recolha cancelada por algum motivo
  finalizada //finalizada => recolha finalizada
}

enum FilialStatus {
  aberta // Quando a tal filial esta On 
  fechado // Quando for de noite => ñ trabalhamos
}

enum RoleEnum {
  superGerente // gerentes que teram acesso ao dashboard principal ["divaldo","fernando","edivaldo"]
  gerente // gerente de uma dada filial
}

enum PaymentStatus {
  expirado //pagamento espirado
  pago //pagamento feito
}

enum DriverStatus {
  On
  Off
}

model authLinksManager {
  id        String   @id @default(uuid())
  code      String   @unique
  managerId String   @map("manager_id")
  createdAt DateTime @default(now()) @map("created_at")

  //relações
  manager Manager @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@map("auth_link_manager")
}

model authLinksDriver {
  id        String   @id @default(uuid())
  code      String   @unique
  driverId  String   @map("driver_id")
  createdAt DateTime @default(now()) @map("created_at")

  //relações
  driver Driver @relation(fields: [driverId], references: [id], onDelete: Cascade)

  @@map("auth_link_driver")
}

model Manager {
  id        String   @id @default(uuid())
  code      String?  @unique
  key       String
  name      String   @db.VarChar(250)
  tel       String   @unique @map("telefone") @db.VarChar(12)
  email     String   @unique
  role      RoleEnum @default(gerente)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  //relações
  authLinksManager authLinksManager[]
  Filial           Filial[]

  @@map("manager")
}

model Filial {
  id        String       @id @default(uuid())
  managerId String       @unique @map("manager_id")
  name      String       @unique @db.VarChar(100)
  tel       String       @unique @map("telefone") @db.VarChar(12)
  address   String       @unique // enderço da filial da empresa
  status    FilialStatus @default(fechado) //status da filial
  googleId  String
  createdAt DateTime     @default(now()) @map("created_at")
  updatedAt DateTime     @updatedAt @map("updated_at")

  //relações
  clientes Cliente[]
  drivers  Driver[]
  Recolha  Recolha[]
  manager  Manager   @relation(fields: [managerId], references: [id], onDelete: Cascade)

  @@map("filias")
}

model Veiculo {
  id        String   @id @default(uuid())
  matricula String   @unique @db.VarChar(11)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  Driver    Driver[]

  @@map("veiculo")
}

model Driver {
  id          String       @id @default(uuid())
  code        String?      @unique
  filialId    String       @map("filial_id")
  veiculoId   String       @unique @map("veiculo_id")
  numberBI    String       @unique @map("numberBI") @db.VarChar(13)
  name        String       @db.VarChar(150)
  email       String       @unique
  status      DriverStatus @default(Off)
  coordenadas Float[]      @default([0, 0]) @db.DoublePrecision() //explo [ 33.8475, -170.5953 ]lat,lgn
  password    String       @default("0000") @map("senha")
  tel         String       @unique @map("telefone") @db.VarChar(12)
  nascimento  DateTime
  avatar      String?
  createdAt   DateTime     @default(now()) @map("created_at")
  updatedAt   DateTime     @updatedAt @map("updated_at")

  recolhas        Recolha[]
  authLinksDriver authLinksDriver[]
  veiculo         Veiculo           @relation(fields: [veiculoId], references: [id])
  filial          Filial            @relation(fields: [filialId], references: [id], onDelete: Cascade)

  @@map("driver")
}

model Payment {
  id        String    @id @default(uuid())
  createdAt DateTime  @default(now()) @map("created_at")
  endAt     DateTime  @map("end_at") //data que o tal pagamento termina
  Cliente   Cliente[]

  @@map("pagamentos")
}

model Cliente {
  id         String        @id @default(uuid())
  filialId   String        @map("filial_id")
  paymentId  String        @map("payment_id")
  name       String        @db.VarChar(250)
  email      String        @unique
  numberBI   String        @unique @map("number_bi") @db.VarChar(13)
  tel        String        @unique @db.VarChar(12)
  avatar     String?
  address    String //enderço da casa do cliente
  googleId   String?
  status     PaymentStatus @default(pago)
  nascimento DateTime
  createdAt  DateTime      @default(now()) @map("created_at")
  updatedAt  DateTime      @updatedAt @map("updated_at")

  //relações
  recolhas Recolha[]
  payment  Payment   @relation(fields: [paymentId], references: [id])
  filial   Filial    @relation(fields: [filialId], references: [id], onDelete: Cascade)

  @@map("clientes")
}

model Recolha {
  id         String   @id @default(uuid())
  clienteId  String   @map("cliente_id") // ñ esquecer de tirar o destino da recolha na lat e lgn do cliente
  driverId   String   @map("motorista_id")
  filialId   String   @map("filial_id")
  status     Status   @default(pendente)
  distance   Float
  duration   Float
  directions Json
  createdAt  DateTime @default(now()) @map("created_at")
  updatedAt  DateTime @updatedAt @map("updated_at")

  //relações
  cliente Cliente @relation(fields: [clienteId], references: [id], onDelete: Cascade)
  driver  Driver  @relation(fields: [driverId], references: [id], onDelete: Cascade)
  filial  Filial  @relation(fields: [filialId], references: [id], onDelete: Cascade)

  @@map("recolhas")
}
